[
   {
      "max_state_count" : 0,
      "bubble" : "Let me know if you have any other request, or type 'Bye' to close the chat",
      "state" : "any_further",
      "execution_order" : 1,
      "state_data" : {},
      "analyzer" : "",
      "action" : "",
      "success_value" : "",
      "queries" : [],
      "failure_value" : "",
      "action_input" : {}
   },
   {
      "state_data" : {},
      "execution_order" : 1,
      "max_state_count" : 0,
      "state" : "call_operator",
      "bubble" : "No operator is available at the moment, sorry. You just have me.",
      "failure_value" : "",
      "action_input" : {},
      "queries" : [],
      "action" : "",
      "success_value" : "",
      "analyzer" : "band(bor(keyword(\"call\"),keyword(\"talk\"),keyword(\"speak\")),keyword(\"operator\"))"
   },
   {
      "state_data" : {},
      "execution_order" : 1,
      "bubble" : "If elasticsearch complain about the size of the virtual memory:\n<br>\n<code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code>\n<br>\n<code>elastisearch exited with code 78</code>\n<br>\nrun:\n<br>\n<code>Sysctl -w vm.max_map_count=262144</code>",
      "state" : "code_78",
      "max_state_count" : 0,
      "action_input" : {},
      "failure_value" : "",
      "queries" : [],
      "success_value" : "",
      "action" : "",
      "analyzer" : "band(keyword(\"code\"),keyword(\"78\"))"
   },
   {
      "bubble" : "To contribute to <a href=\"http://git.io/*chat\">StarChat</a>, please send us a pull request from your fork of this repository.\n<br>Our concise contribution guideline contains the bare minimum requirements of the code contributions.\n<br>Before contributing (or opening issues), you might want to email us at starchat@getjenny.com.",
      "state" : "contribute",
      "max_state_count" : 0,
      "execution_order" : 1,
      "state_data" : {},
      "analyzer" : "bor(keyword(\"contribute\"))",
      "success_value" : "",
      "action" : "",
      "queries" : [],
      "action_input" : {},
      "failure_value" : ""
   },
   {
      "queries" : [],
      "failure_value" : "",
      "action_input" : {},
      "analyzer" : "band(keyword(\"create\"), bor(keyword(\"index.*\"), keyword(\"indic.*\")))",
      "action" : "",
      "success_value" : "",
      "state_data" : {},
      "max_state_count" : 0,
      "state" : "create_es_indexes",
      "bubble" : "To create Elasticsearch indexes:<br> <code>./docker-starchat/starchat/scripts/api_test/postIndexManagementCreate.sh</code>",
      "execution_order" : 1
   },
   {
      "analyzer" : "band(keyword(\"create\"), keyword(\"elastic.*\"),  bor(keyword(\"index\"),  keyword(\"indices\"),  keyword(\"indeces\"),  keyword(\"indexes\")))",
      "action" : "",
      "success_value" : "",
      "queries" : [],
      "failure_value" : "",
      "action_input" : {},
      "max_state_count" : 0,
      "state" : "create_es_indices",
      "bubble" : "Run\n<br>\n<code>./docker-starchat/starchat/scripts/api_test/postIndexManagementCreate.sh</code>\n<br>\n(to delete previously created indexes: <code>./docker-starchat/starchat/scripts/api_test/deleteIndexManagement.sh</code>)\n<br>\nNow ask me how to <em>load configuration file</em>.\n",
      "execution_order" : 1,
      "state_data" : {}
   },
   {
      "analyzer" : "band(keyword(\"delete\"), bor(keyword(\"index.*\"), keyword(\"indic.*\")))",
      "success_value" : "",
      "action" : "",
      "queries" : [],
      "action_input" : {},
      "failure_value" : "",
      "bubble" : "To delete previously created indexes:<br><code>./docker-starchat/starchat/scripts/api_test/deleteIndexManagement.sh</code>.",
      "state" : "delete_es_indexes",
      "max_state_count" : 0,
      "execution_order" : 1,
      "state_data" : {}
   },
   {
      "state_data" : {},
      "max_state_count" : 0,
      "state" : "docker_install",
      "bubble" : "In the terminal, go into the root directory of StarChat, and generate a packet distribution:\n<br>\n<code>sbt dist</code>\n<br>\nThen enter the directory docker-starchat:\n<br>\n<code>cd  docker-starchat</code>\n<br>\nYou will get a message like <code>Your package is ready in ...../target/universal/starchat-4ee.... .zip</code>.\n<br>Extract the packet into the docker-starchat folder:\n<br>\n<code>unzip ../target/universal/starchat-4eee.....zip</code><br>\n<code>ln -s starchat-4ee..../  starchat</code>\n<br>\nNow launch the dockers:\n<br>\n<code>docker-compose up -d</code>\n<br>\nIf you have problems, tell me the output (eg <em>elastisearch exited with code 78</em>) otherwise type <em>create elasticsearch indices</em>.",
      "execution_order" : 1,
      "queries" : [],
      "failure_value" : "",
      "action_input" : {},
      "analyzer" : "band(keyword(\"docker\"), keyword(\"install.*\"))",
      "action" : "",
      "success_value" : ""
   },
   {
      "bubble" : "I do not understand your input, please try again or type \"help\" to know my capabilities",
      "state" : "dont_understand",
      "max_state_count" : 0,
      "execution_order" : 1,
      "state_data" : {},
      "analyzer" : "",
      "success_value" : "",
      "action" : "",
      "queries" : [],
      "action_input" : {},
      "failure_value" : ""
   },
   {
      "action_input" : {
         "Account locked" : "account_locked",
         "Specify your problem" : "specify_problem",
         "I want to call an operator" : "call_operator",
         "Forgot Password" : "forgot_password",
         "None of the above" : "start"
      },
      "failure_value" : "dont_understand",
      "queries" : [
         "cannot access account",
         "problem access account"
      ],
      "success_value" : "eval(show_buttons)",
      "action" : "show_buttons",
      "analyzer" : "or(and(or(keyword(\"problem.*\"),keyword(\"issue.*\"),keyword(\"trouble.*\")),keyword(\"account\")))",
      "state_data" : {
         "verification" : "did you mean you can't access to your account?"
      },
      "execution_order" : 1,
      "state" : "further_details_access_question",
      "bubble" : "Can you specify which of the following problems you have? [NB works only if buttons can be shown!]",
      "max_state_count" : 0
   },
   {
      "analyzer" : "band(keyword(\"help\"))",
      "success_value" : "",
      "action" : "",
      "queries" : [],
      "action_input" : {},
      "failure_value" : "",
      "state" : "help",
      "bubble" : "Ask me questions like... how to install? ...how to contribute? ...is it open source? ...how to install with docker? ...how to make a standalone installation? ...how to index data?",
      "max_state_count" : 0,
      "execution_order" : 1,
      "state_data" : {}
   },
   {
      "queries" : [],
      "action_input" : {},
      "failure_value" : "",
      "analyzer" : "band(bor(keyword(\"index\"),keyword(\"load\")), keyword(\"analyzer\"))",
      "success_value" : "",
      "action" : "",
      "state_data" : {},
      "state" : "index_analyzer",
      "bubble" : "If you want to re-index the analyzer fields:<br><code>./docker-starchat/starchat/scripts/api_test/postAnalyzer.sh</code>.",
      "max_state_count" : 0,
      "execution_order" : 1
   },
   {
      "max_state_count" : 0,
      "bubble" : "There are three kind of data on starchat:\n<ul>\n  <li>Knowledge Base: contains a dataset wit Questions/Answers and is used by the question/answer recommender.</li>\n  <li>Decision Table:  stores the behaviour of the chatbot</li>\n  <li>Terms Index: stores the vector representation of terms, this data are needed to use some of the StarChat's semantic analysis features</li>\n</ul>\n\nTo index data into the Knowledge Base see: <a href=\"https://getjenny.github.io/starchat-doc/#configuration-of-the-answer-recommender-knowledge-base\">Configuration of the answer recommender</a>\n<br>\nTo index data into the Decision Table see: <a href=\"https://getjenny.github.io/starchat-doc/#configuration-of-the-decisiontable\">Configuration of the Decision Table</a>\n<br>\nTo index terms you can download a pre-trained word2vec model or train a new model by yourself, note that indexing programs only accept a textual format for the input file: <a href=\"https://getjenny.github.io/starchat-doc/#indexing-terms-on-term-table\">Indexing of the terms vector dataset</a>",
      "state" : "index_data",
      "execution_order" : 1,
      "state_data" : {},
      "analyzer" : "band(keyword(\"index\"), keyword(\"data\"))",
      "action" : "",
      "success_value" : "",
      "queries" : [],
      "failure_value" : "",
      "action_input" : {}
   },
   {
      "state_data" : {},
      "execution_order" : 1,
      "max_state_count" : 0,
      "state" : "install",
      "bubble" : "Just choose one of the two:\n<ul>\n<li>docker install (recommended)</li>\n<li>standalone install</li>\n</ul>",
      "failure_value" : "",
      "action_input" : {},
      "queries" : [],
      "action" : "",
      "success_value" : "",
      "analyzer" : "band(bor(keyword(\"setup\"), keyword(\"install.*\")), bnot(bor(keyword(\"standalone\"), keyword(\"docker\"))))"
   },
   {
      "execution_order" : 1,
      "max_state_count" : 0,
      "bubble" : "StarChat is Open Source software, namely released under the General Public Licence 2. More information on the <a href=\"http://git.io/*chat\">repository</a>",
      "state" : "licence",
      "state_data" : {},
      "action" : "",
      "success_value" : "",
      "analyzer" : "bor(band(keyword(\"open\"), keyword(\"source\")), keyword(\"opensource\"), keyword(\"licence\"))",
      "failure_value" : "",
      "action_input" : {},
      "queries" : []
   },
   {
      "state_data" : {},
      "state" : "load_conf_file",
      "bubble" : "Just run:\n<br>\n<code>./docker-starchat/starchat/bin/index-decision-table --inputfile <em>FILENAME</em></code>.",
      "max_state_count" : 0,
      "execution_order" : 1,
      "queries" : [],
      "action_input" : {},
      "failure_value" : "",
      "analyzer" : "band(keyword(\"load.*\"), bor(keyword(\"config.*\"), band(keyword(\"decision\"), keyword(\"table\"))), keyword(\"file.*\"))",
      "success_value" : "",
      "action" : ""
   },
   {
      "failure_value" : "",
      "action_input" : {},
      "queries" : [],
      "action" : "",
      "success_value" : "",
      "analyzer" : "band(bor(keyword(\"start\"), keyword(\"quickstart\")), keyword(\"starchat\"))",
      "state_data" : {},
      "execution_order" : 1,
      "max_state_count" : 0,
      "bubble" : "The easiest way is to install StarChat using two docker images. You only need:\n<br>\n<ul>\n<li>sbt</li>\n<li>docker</li>\n<li>docker-compose</li>\n</ul>\n\nIn this way, you will put all the indices in the Elasticsearch (version 5.3) image, and StarChat itself in the Java (8) image.\n<br>\nIf you do not use docker you therefore need on your machine:\n<br>\n<ul>\n<li>Scala 12.2</li>\n<li>Elasticsearch 5.3</li>\n</ul>\nJust type “docker install” or “standalone install” to go on.\n",
      "state" : "quickstart"
   },
   {
      "execution_order" : 1,
      "max_state_count" : 0,
      "bubble" : "Have a look at <a href=\"https://getjenny.github.io/starchat-doc/#install-without-docker\">how to install without Docker</a>.",
      "state" : "standalone_install",
      "state_data" : {},
      "action" : "show_buttons",
      "success_value" : "eval(show_buttons)",
      "analyzer" : "band(keyword(\"standal.*\"), keyword(\"install\"))",
      "failure_value" : "dont_understand",
      "action_input" : {
         "Terrible" : "terrible_feedback",
         "Excellent" : "excellent_feedback"
      },
      "queries" : []
   },
   {
      "execution_order" : 1,
      "state" : "terrible_feedback",
      "bubble" : "I might be wrong, but I detected swearing. Cannot answer to that.",
      "max_state_count" : 0,
      "state_data" : {},
      "success_value" : "",
      "action" : "",
      "analyzer" : "booleanor(keyword(\"idiot\"), keyword(\"fuck.*\"), keyword(\"screw\"), keyword(\"damn.*\"), keyword(\"asshole\"))",
      "action_input" : {},
      "failure_value" : "",
      "queries" : []
   }
]
